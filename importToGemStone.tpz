ifErr 1 stk
ifErr 2 stack
ifErr 3 abort
ifErr 4 exit
set compile_env: 0
run
| symbolList |
symbolList := (Globals at: #System) myUserProfile symbolList.
(symbolList objectNamed: #'Pharo') ifNil: [
	symbolList
		createDictionaryNamed: #'Pools' at: 0;
		createDictionaryNamed: #'Pharo' at: 0;
		yourself.
	System refreshTransientSymbolList.
].
%
run
"allow methods to compile; may need to fix this!"
#(
	"VM"
	#'thisContext'

	"tests"
	#'Trait1'
	#'Trait2'
	#'Trait3'
	#'TSortable'

	"Iceberg"
	#'thunk'

	"Seaside"
	#'ObjectExplorerWrapper'
	#'ProcessBrowser'
	#'WorldState'
	#'WAAdmin'
	#'WAHtmlCanvas'
	#'Display'
	#'Sensor'
	#'SystemWindow'
	#'SpaceTally'
	#'MessageTally'
	#'EllipseMorph'

	"PolyMath"
	#'RSView'
	#'TSScale'
	#'RSShapeBuilder'
	#'PackageInfo'
	#'GrowlMorph'
	#'DataFrame'
	#'Cursor'
	
) @env0:do: [:each | UserGlobals @env0:at: each ifAbsentPut: [nil]].
"Seaside looks for this explictly in 'Smalltalk globals'"
Pharo at: #'PragmaSetting' put: nil.
%
errorCount
commit
logout
login
set compile_env: 0
input PharoGs.tpz
! return from PharoGs.tpz
input importGsEdits.tpz
! return from importGsEdits.out
errorCount

run
Object superclassForEnv: 2 put: ProtoObject.
Object class superclassForEnv: 2 put: ProtoObject class.
Array superclassForEnv: 2 put: ArrayedCollection.
Array class superclassForEnv: 2 put: ArrayedCollection class.
ByteArray superclassForEnv: 2 put: ArrayedCollection.
ByteArray class superclassForEnv: 2 put: ArrayedCollection class.
Class superclassForEnv: 2 put: Module.
Class class superclassForEnv: 2 put: Module class.
(Globals at: #'ScaledDecimal') superclassForEnv: 2 put: ProtoObject.
ScaledDecimal superclassForEnv: 2 put: Fraction.
ScaledDecimal class superclassForEnv: 2 put: Fraction class.
SmallFloat64 superclassForEnv: 2 put: Float.
SmallFloat64 class superclassForEnv: 2 put: Float class.
SmalltalkImage superclassForEnv: 2 put: IdentityDictionary.
SmalltalkImage class superclassForEnv: 2 put: IdentityDictionary class.
String superclassForEnv: 2 put: ArrayedCollection.
String class superclassForEnv: 2 put: ArrayedCollection class.
SymbolAssociation superclassForEnv: 2 put: Association.
SymbolAssociation class superclassForEnv: 2 put: Association class.
"Delegate to Pharo SymbolDictionary, so want to avoid any local methods"
SystemDictionary superclassForEnv: 2 put: Object.
SystemDictionary class superclassForEnv: 2 put: Object class.
true
%
errorCount
set compile_env: 0
run
"Create Smalltalk, an instance of SystemDictionary"
| systemDictionary |
Pharo
	at: #'Undeclared' put: Dictionary @env2:new;
	yourself.
systemDictionary := SystemDictionary @env2:new.
Pharo keysAndValuesDo: [:eachKey :eachValue | 
	eachKey ~~ #'Pharo' ifTrue: [
		systemDictionary @env2:at: eachKey put: eachValue.
	].
].
(Smalltalk := SmalltalkImage basicNew)
	@env2:globals: systemDictionary;
	@env2:specialObjectsArray: Smalltalk @env2:newSpecialObjectsArray;
	yourself.
%
run
"Add SharedPool class variables to a new SymbolDictionary so Jade shows them"
SharedPool allSubclasses do: [:each |
	Pools at: each name put: each _classVars.
].
true
%
errorCount

set compile_env: 2
run
"Class and Pool initialization"
ChronologyConstants initialize.
DateAndTime initialize.
Color initialize.
HashTableSizes initialize.
Character initialize.
String initialize.
Float initialize.
File initialize.
OSPlatform initialize.
Base64MimeConverter initialize.
ZnBase64Encoder initialize.
ISO88592TextConverter initialize.
Socket initialize.
FileLocator initialize.
ZnHeaders initialize.
ZnNetworkingUtils initialize.
ZnLogEvent initialize.
ZnConstants initialize.
ZnMimeType initialize.
ZipWriteStream initialize.
InflateStream initialize.
FastInflateStream initialize.
ChangeSet initialize.
MetacelloPharoPlatform initialize.
MCFileTreeFileSystemUtils initialize.
MD5NonPrimitive initialize.
TonelFileSystemUtils initialize.
ByteTextConverter initialize.

SharedPool allSubclasses do: [:each | each initialize].

SystemOrganization := SystemOrganizer new.
SystemOrganizer environment organization: SystemOrganization.
SourceFiles := SourceFileArray new.
Transcript := Globals @env0:at: #'Transcript'.

true
%
commit
logout
login

set compile_env: 0
run
| gsFile |
gsFile := GsFile openWriteOnServer: 'PharoGsMethods.txt'.
Pharo keys asSortedCollection do: [:eachKey | 
	| eachGlobal |
	eachGlobal := Pharo at: eachKey.
	eachGlobal isClass ifTrue: [
		(Array with: eachGlobal class with: eachGlobal) do: [:eachBehavior | 
			(eachBehavior selectorsForEnvironment: 2) asSortedCollection do: [:eachSelector |
				(eachBehavior pragmasForMethod: eachSelector env: 2) do: [:eachPragma | 
					(eachPragma keyword indexOfSubCollection: 'Pharo' startingAt: 1) == 1 ifTrue: [
						| name |
						name := eachKey.
						eachBehavior isMeta ifTrue: [name := name , ' class'].
						gsFile nextPutAll: name , '>>' , eachSelector; cr.
					].
				].
			].
		].
	].
].
gsFile close.
true
%
run
| list stream |
stream := (Globals at: #WriteStream) on: (Globals at: #String) new.
list := (Globals at: #OrderedCollection) new
	add: FloatTest;
	add: FractionTest;
	add: IntegerDigitLogicTest;
	add: IntegerTest;
	add: NumberTest;
	add: ScaledDecimalTest;
	add: SmallIntegerTest;
	add: BooleanTest;
	add: FalseTest;
	add: TrueTest;
	add: UndefinedObjectTest;
	add: FileTest;
	add: Base64MimeConverterTest;
	add: Base64Test;
	add: NetNameResolverTest;
	add: SocketAddressTest;
	add: TCPSocketTest;
	add: SocketStreamTest;
	add: TCPSocketEchoTest;
	add: FileStreamTest;
	add: MCAncestryTest;
	add: ZipArchiveTest;
	add: ZipCrcTest;
	add: ZipExtensionTest;
	add: ZipWriteStreamTest;
	yourself.
list do: [:each | 
	| string |
	string := each @env2:suite @env2:run @env2:printString.
	(string at: 2) == Character space ifTrue: [
		string := ' ' , string.
	].
	(string at: 10) == Character space ifTrue: [
		string := (string copyFrom: 1 to: 8) , ' ' , (string copyFrom: 9 to: string size).
	].
	(string at: 61) == $, ifTrue: [
		string := (string copyFrom: 1 to: 60) , ' ' , (string copyFrom: 61 to: string size).
	].
	(string includesString: ', 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 passed unexpected') ifTrue: [
		string := string copyFrom: 1 to: 17.
	].
	(string includesString: ', 0 failures, 0 errors, 0 passed unexpected') ifTrue: [
		string := string copyFrom: 1 to: 28.
	].
	stream
		nextPutAll: each name; 
		nextPutAll: ('                         ' copyFrom: each name size + 1 to: 25);
		nextPutAll: string;
		lf.
].
stream contents.
%

logout
! successful import of Pharo into GemStone!
exit
